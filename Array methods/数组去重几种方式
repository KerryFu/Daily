  // 方式1  indexOf()  源码中常见方式
  var uniq = function(array){ 
    return Array.prototype.filter.call(array, function(item, idx){ 
      return array.indexOf(item) == idx 
    }) 
  }
  console.log(uniq([1,1,2,4,2]))   // [1,2,4]
  
  // 方式2 es6中Set 类似于数组，但成员值是唯一的，没有重复值
  const set = new Set(array);
  [...set]    // [1,2,4]
  
  
 // 方式3
 定义一个要去重的数组
    var arr1 = [1,2,2,3,3,3,4,4,4,4];
    //定义一个新数组
    var newArr1 = [];
    //循环遍历数组利用indexOf的方法去重数组中的字符串
    for(var i=0;i<arr1.length;i++){
        if(newArr1.indexOf(arr1[i])==-1){
             newArr1.push(arr1[i]);
        }
    }
console.log(newArr1);

// indexOf() ie6-8不存在，所以可以根据需求封装
var indexOf = [].indexOf ?
    function(arr, item) {
      return arr.indexOf(item)
    } :
    function indexOf(arr, item) {
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === item) {
          return i
        }
      }
      return -1
    }

// 方式4
    var arr3 = [1,2,2,3,3,3,4,4,4,4];
    //定义一个新数组,用来存储结果
    var newArr3 = [];
    newArr3[0] = arr3[0];
    for(var i=0;i<arr3.length;i++){
        var flag = true;
        for(var j=0;j<newArr3.length;j++){
            if(newArr3[j]==arr3[i]){
                flag = false;
            }
        }
        if(flag){
            newArr3.push(arr3[i]);
        }
    }
    console.log(newArr3);


/*
* 方式5（方式4适用不好）
* 使用obj的键值来 模拟 indexOf，obj的键key必须为字符串
* typeOf(1) + 1  // 'number1'
* typeOf('1') + '1'  // 'string1'  来区分数组中元素 1和'1'
* obj[key] 不等于1，item加入数组，然后置为1
*
**/ 

var array = [1, 2, 3, 5, 1, 5, 9, 1, 2, '1', 8];

function unique(arr){
  var re = [];
  var obj = {};
  for(var i = 0; i<arr.length ; i++){
    var item = arr[i];
    var key = typeof(item) + item;
    console.log(key);
    if(obj[key] !== 1){
      re.push(item);
      obj[key] = 1;
    }
  }
  return re;
}
console.log(unique(array));   // [1, 2, 3, 5, 9, "1", 8]
